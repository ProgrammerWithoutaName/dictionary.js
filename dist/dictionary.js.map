(function(window, Builder) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define(Builder);
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = Builder();
  } else {
    // Browser Global (dictionary is your global library identifier)
    window.dictionary = Builder();
  }
}(this, function() {
  var require, itemToExport;

  // this is the what is defined in browserify's "entry" item in the configBundles array.
  // located in gulp/config.js under "browserify"
  itemToExport = 1;

  require = {"version":3,"file":"dictionary.js","names":[],"mappings":"","sources":["dictionary.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar storeManagerBuilder, dictionaryBuilder, buildDictionary;\n\nstoreManagerBuilder = require('./dictionaryUtility/store/storeManagerBuilder');\ndictionaryBuilder = require('./dictionaryUtility/dictionaryBuilder');\n\nbuildDictionary = function(options) {\n  var store, getValueKey;\n\n  options.reservedNames = options.reservedNames ? options.reservedNames : [];\n\n  getValueKey = options.valueKeyFunction || function(nameValue) {\n    return nameValue.value;\n  };\n\n  store = storeManagerBuilder.build({\n    getValueKey: getValueKey\n  });\n\n  options.reservedNames.forEach(store.addReservedName);\n\n  return dictionaryBuilder.build(store);\n};\n\nmodule.exports = {\n  build: buildDictionary\n};\n\n},{\"./dictionaryUtility/dictionaryBuilder\":2,\"./dictionaryUtility/store/storeManagerBuilder\":11}],2:[function(require,module,exports){\n'use strict';\n\nfunction buildDictionary(store) {\n  var dictionary = Object.create(store.data.nameValueMap);\n\n  dictionary.$add = store.add;\n\n  return dictionary;\n}\n\nmodule.exports = {\n  build: buildDictionary\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar nameExistsErrorDefinitionBuilder, valueExistsErrorDefinitionBuilder, reservedNameErrorDefinitionBuilder;\n\nnameExistsErrorDefinitionBuilder = require('./dictionaryErrors/nameExistsErrorDefinitionBuilder');\nvalueExistsErrorDefinitionBuilder = require('./dictionaryErrors/valueExistsErrorDefinitionBuilder');\nreservedNameErrorDefinitionBuilder = require('./dictionaryErrors/reservedNameErrorDefinitionBuilder');\n\nfunction addErrorHandling(options) {\n  var errorHandling, reservedNameErrorDefinition;\n\n  reservedNameErrorDefinition = reservedNameErrorDefinitionBuilder.build(options.store);\n\n  errorHandling = options.errorHandling;\n  errorHandling.addErrorDefinition(nameExistsErrorDefinitionBuilder.build(options.store));\n  errorHandling.addErrorDefinition(valueExistsErrorDefinitionBuilder.build(options.store));\n  errorHandling.addErrorDefinition(reservedNameErrorDefinition);\n\n  errorHandling.addReservedName = reservedNameErrorDefinition.addReservedName;\n}\n\nmodule.exports = {\n  addErrorHandling: addErrorHandling\n};\n\n},{\"./dictionaryErrors/nameExistsErrorDefinitionBuilder\":4,\"./dictionaryErrors/reservedNameErrorDefinitionBuilder\":5,\"./dictionaryErrors/valueExistsErrorDefinitionBuilder\":6}],4:[function(require,module,exports){\n'use strict';\n\nvar stringFormatter, nameExistsError;\n\nstringFormatter = require('../../stringFormatter');\n\nnameExistsError = 'name \"{name}\" is already in use, value is {value}';\n\nfunction buildNameExistsError(nameValue, store) {\n  var errorText = stringFormatter.format(nameExistsError,\n  {\n    name: nameValue.name,\n    value: store.getValueKey(nameValue)\n  });\n\n  return new Error(errorText);\n}\n\nfunction nameExistsErrorCondition(nameValue, store) {\n  return !!store.nameValueMap[nameValue.name];\n}\n\nfunction buildValueExistsErrorDefinition (store) {\n  return {\n    errorName: 'nameExists',\n    errorCondition: function(nameValue) { return nameExistsErrorCondition(nameValue, store); },\n    errorBuilder: function(nameValue) { return buildNameExistsError(nameValue, store); }\n  };\n}\n\nmodule.exports = {\n  build: buildValueExistsErrorDefinition\n};\n\n},{\"../../stringFormatter\":12}],5:[function(require,module,exports){\n'use strict';\n\nvar stringFormatter, nameExistsError;\n\nstringFormatter = require('../../stringFormatter');\n\nnameExistsError = 'name \"{name}\" is reserved for {type} constants dictionary';\n\nfunction buildNameReservedError(nameValue, store) {\n  var errorText = stringFormatter.format(nameExistsError,\n  {\n    name: nameValue.name,\n    type: store.dictionaryName\n  });\n\n  return new Error(errorText);\n}\n\nfunction nameReservedErrorCondition(nameValue, reservedNames) {\n  return !!reservedNames[nameValue.name];\n}\n\nfunction addReservedName(name, reservedNames) {\n  reservedNames[name] = true;\n}\n\nfunction buildReservedNameErrorDefinition (store) {\n  var reservedNames = {};\n\n  return {\n    errorName: 'nameReserved',\n    errorCondition: function(nameValue) { return nameReservedErrorCondition(nameValue, reservedNames); },\n    errorBuilder: function(nameValue) { return buildNameReservedError(nameValue, store); },\n    addReservedName: function(name) { addReservedName(name, reservedNames); }\n  };\n}\n\nmodule.exports = {\n  build: buildReservedNameErrorDefinition\n};\n\n},{\"../../stringFormatter\":12}],6:[function(require,module,exports){\n'use strict';\n\nvar stringFormatter, valueExistsErrorText;\n\nstringFormatter = require('../../stringFormatter');\n\nvalueExistsErrorText = 'given name {givenName} with a value of \"{value}\" already exists with a name of \"{name}\"';\n\nfunction buildValueExistsError(nameValue, store) {\n  var errorText = stringFormatter.format(valueExistsErrorText,\n  {\n    givenName: nameValue.name,\n    name: store.valueNameMap[store.getValueKey(nameValue)],\n    value: store.getValueKey(nameValue)\n  });\n\n  return new Error(errorText);\n}\n\nfunction valueExistsErrorCondition(nameValue, store) {\n  return !!store.valueNameMap[nameValue.value];\n}\n\nfunction buildValueExistsErrorDefinition (store) {\n  return {\n    errorName: 'valueExists',\n    errorCondition: function(nameValue) { return valueExistsErrorCondition(nameValue, store); },\n    errorBuilder: function(nameValue) { return buildValueExistsError(nameValue, store); }\n  };\n}\n\nmodule.exports = {\n  build: buildValueExistsErrorDefinition\n};\n\n},{\"../../stringFormatter\":12}],7:[function(require,module,exports){\n'use strict';\n\nfunction throwRelevantError(errorValue, errorDefinitions) {\n  errorDefinitions.forEach(function (errorDefinition){\n    if(errorDefinition.condition(errorValue)) {\n      throw new Error(errorDefinition.buildError(errorValue));\n    }\n  });\n}\n\nfunction addErrorDefinition(errorDefinition, errorDefinitions) {\n  errorDefinitions.push({\n    condition: errorDefinition.errorCondition,\n    buildError: errorDefinition.errorBuilder\n  });\n}\n\nfunction buildErrorHandling(){\n  var errorHandling = {\n    errorDefinitions: [],\n    addErrorDefinition: function(errorDefinition){ addErrorDefinition( errorDefinition, errorHandling.errorDefinitions); },\n    throwRelevantError: function(errorValue) { throwRelevantError(errorValue, errorHandling.errorDefinitions);}\n  };\n\n  return errorHandling;\n}\n\nmodule.exports = {\n  build: buildErrorHandling\n};\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar errorHandlingBuilder, dictionaryErrorHandling;\n\nerrorHandlingBuilder = require('../errorHandlingBuilder');\ndictionaryErrorHandling = require('../dictionaryErrorHandling');\n\nfunction addErrorHandling(options) {\n  var errorHandling = errorHandlingBuilder.build();\n\n  dictionaryErrorHandling.addErrorHandling({\n    store: options.store,\n    constantsObjectName: options.constantsObjectName,\n    errorHandling: errorHandling\n  });\n\n  options.store.errorHandling = errorHandling;\n\n  return options.store;\n}\n\nmodule.exports = {\n  addToStore: addErrorHandling\n};\n\n},{\"../dictionaryErrorHandling\":3,\"../errorHandlingBuilder\":7}],9:[function(require,module,exports){\n'use strict';\n\nvar storeErrorHandlingManager;\n\nstoreErrorHandlingManager = require('./errorHandlingManager');\n\nfunction buildDataStore(options) {\n  var storeBase;\n\n  storeBase = {\n    dictionaryName: options.dictionaryName,\n    nameValueMap: {},\n    valueNameMap: {},\n    getValueKey: options.getValueKey\n  };\n\n  storeBase = storeErrorHandlingManager.addToStore({\n    store: storeBase,\n    errorHandling: storeBase.errorHandling\n  });\n\n  storeBase.errorHandling.addReservedName('$add');\n\n  return storeBase;\n}\n\nmodule.exports = {\n  build: buildDataStore\n};\n\n},{\"./errorHandlingManager\":8}],10:[function(require,module,exports){\n'use strict';\n\nfunction addSingle(nameValue, store) {\n  var nameValueMap, valueNameMap;\n\n  nameValueMap = store.nameValueMap;\n  valueNameMap = store.valueNameMap;\n\n  nameValueMap[nameValue.name] = nameValue.value;\n  valueNameMap[store.getValueKey(nameValue)] = nameValue.name;\n}\n\nfunction checkAddSingle(options) {\n  options.errorHandling.throwRelevantError(options.nameValue);\n  addSingle(options.nameValue, options.store);\n}\n\nfunction addAll(nameValues, store) {\n  var keys;\n\n  keys = Object.keys(nameValues);\n\n  keys.forEach(function(name) {\n    checkAddSingle({\n      errorHandling: store.errorHandling,\n      store: store,\n      nameValue: { name: name, value: nameValues[name]}\n    });\n  });\n\n}\n\nmodule.exports = {\n  addAll: addAll,\n  addSingle: addSingle\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar storeBuilder, storeManagement;\n\nstoreBuilder = require('./storeBuilder');\nstoreManagement = require('./storeManagement');\n\nfunction addPropertyErrorHandling(options) {\n  Object.defineProperty(options.store,\n    'errorHandling',\n    {\n      enumerable: false,\n      configurable: false,\n      get: function() { return options.storeBase.errorHandling; }\n    });\n}\n\nfunction addPropertyAddReservedName(options) {\n  Object.defineProperty(options.store,\n    'addReservedName',\n    {\n      enumerable: false,\n      configurable: false,\n      get: function() { return options.storeBase.errorHandling.addReservedName; }\n    });\n}\n\nfunction addProperties(options) {\n  addPropertyErrorHandling(options);\n  addPropertyAddReservedName(options);\n}\n\nfunction createStore(storeBase) {\n  var store;\n\n  store = {\n    add: function(nameValues) { storeManagement.addAll(nameValues, storeBase); },\n    data: storeBase\n  };\n\n  return store;\n}\n\nfunction buildstoreManager(options) {\n  var storeBase, store;\n\n  storeBase = storeBuilder.build(options);\n  store = createStore(storeBase);\n\n  addProperties({\n    store: store,\n    storeBase: storeBase\n  });\n\n  return store;\n}\n\nmodule.exports = {\n  build: buildstoreManager\n};\n\n},{\"./storeBuilder\":9,\"./storeManagement\":10}],12:[function(require,module,exports){\n'use strict';\n\n/*\nexample:\nvar format = 'this is test {testGiven} for a showing how to use {name}';\nvar formattedString = format(fomat, {\n  testGiven: 'stringFormatter',\n  name: 'format'\n});\n */\n\n//TODO: Evaluate if there is a need to pull this into it's own library? Perhaps if we get more utility functions\nfunction format(stringToFormat, values) {\n  return stringToFormat.replace(/{(\\w+)}/g, function(match, value) {\n    return (values[value] !== undefined) ? values[value] : match;\n  });\n}\n\nmodule.exports = {\n  format: format\n};\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"};

  return require(itemToExport);
}));